# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'signup.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import cv2
import random
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import QApplication, QMainWindow
import sys


class Ui_MainWindow(object):
    def __init__(self):
        # 初始化摄像头
        self.cap = cv2.VideoCapture(0)
        # self.set(CV_CAP_PROP_FPS,30)

        # 初始化图片
        self.img = []  # 这个是实时展示的图像
        self.save_face_img = []  # 这个是注册时拍摄的图像
        self.openFlag = 0

    #
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.camera_lab = QtWidgets.QLabel(self.centralwidget)
        self.camera_lab.setGeometry(QtCore.QRect(60, 40, 411, 301))
        self.camera_lab.setObjectName("camera_lab")
        self.facelab = QtWidgets.QLabel(self.centralwidget)
        self.facelab.setGeometry(QtCore.QRect(560, 50, 355, 251))
        self.facelab.setObjectName("facelab")
        # 开启摄像头按钮
        self.openBtn = QtWidgets.QPushButton(self.centralwidget)
        self.openBtn.setGeometry(QtCore.QRect(60, 420, 75, 23))
        self.openBtn.setObjectName("openBtn")
        self.openBtn.clicked.connect(self.opencm)
        # 关闭按钮
        self.closeBtn = QtWidgets.QPushButton(self.centralwidget)
        self.closeBtn.setGeometry(QtCore.QRect(60, 460, 75, 23))
        self.closeBtn.setObjectName("closeBtn")
        self.closeBtn.clicked.connect(self.closecm)

        self.save_face = QtWidgets.QPushButton(self.centralwidget)
        self.save_face.setGeometry(QtCore.QRect(560, 250, 75, 23))
        # 保存图片
        self.save_face.setObjectName("save_face")
        self.train = QtWidgets.QPushButton(self.centralwidget)
        self.train.setGeometry(QtCore.QRect(560, 290, 91, 23))

        # 训练
        self.train.setObjectName("train")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        # self.camera_lab.setText(_translate("MainWindow", "TextLabel"))
        # self.facelab.setText(_translate("MainWindow", "TextLabel"))
        self.openBtn.setText(_translate("MainWindow", "开启摄像头"))
        self.closeBtn.setText(_translate("MainWindow", "拍摄"))
        self.save_face.setText(_translate("MainWindow", "保存人脸"))
        self.train.setText(_translate("MainWindow", "重新训练人脸"))
        self.menu.setTitle(_translate("MainWindow", "人脸识别注册"))
        self.menu_2.setTitle(_translate("MainWindow", "需配置"))

        # 这个可以直接复用只要绑定好摄像头、按钮和对应的label框

    def opencm(self):
        # sender=self.sender()
        print("open", self.cap)
        self.openFlag = 1
        # 初始化一个级联分类器
        face_detector = cv2.CascadeClassifier(
            "C:\\Users\\Administrator\\AppData\\Local\\Programs\\"
            "Python\\Python310\\Lib\\site-packages\\cv2\\data\\haarcascade_frontalface_default.xml")
        # face_detector=cv2.CascadeClassifier("D:\\anconda3\\pkgs\\scikit-image-0.19.3-py310hd77b12b_1\\Lib\\site-packages\\skimage\\data\\lbpcascade_frontalface_opencv.xml")
        while (self.openFlag == 1):
            if self.cap.isOpened() == False:
                print('can not open camera')
                break
            flag, self.image = self.cap.read()
            # 这样写只显示一个图片

            show = cv2.resize(self.image, (480, 320))
            show = cv2.cvtColor(show, cv2.COLOR_BGR2RGB)
            show1 = cv2.cvtColor(show, cv2.COLOR_RGB2GRAY)
            show2 = show1
            # show2 = cv2.cvtColor(show, cv2.COLOR_RGB2GRAY)
            faces_rect = face_detector.detectMultiScale(show1, 1.05, 3)
            print("人脸矩形坐标faces_rect：", faces_rect)
            print(show.shape, show1.shape)
            x, y, w, h = 0, 0, 0, 0
            for x, y, w, h in faces_rect:
                showd=show.copy()
                cv2.rectangle(show1, (x, y), (x + w, y + h), (0, 0, 255), 1)
                cv2.rectangle(showd, (x, y), (x + w, y + h), (0, 0, 255), 3)
                if (x > 0 and y > 0):
                    show2 = show[y:y + h, x:x + w]

                    # cv2.imshow("",show1)
                    # print(self.save_face.shape)
                    cv2.imshow("",show2)
                    self.save_face_img = show

            # cv2.waitKey(0)
            # 图像显示在控件上
            showImage = QImage(showd.data, showd.shape[1], showd.shape[0], QImage.Format_RGB888)
            self.camera_lab.setPixmap(QPixmap.fromImage(showImage))
            # showImage1 = QImage(show2.data, show2.shape[1], show2.shape[0],QImage.Format_RGB888)
            # self.facelab.setPixmap(QPixmap.fromImage(showImage1),)
            # self.camera.open()
            # flag,self.image=self.camera.cap.read()
            # show=cv2.resize(self.image)
            # 下面这段不能省略，否则会出错误
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
        self.cap.release()
        cv2.destroyAllWindows()
        self.cap = cv2.VideoCapture(0)

    def closecm(self):
        self.openFlag = 0
        # self.camera.close()
        print("close", self.cap)
        #self.save_face_img = cv2.resize(self.save_face_img, (128, 128))
        show2 = cv2.cvtColor(self.save_face_img, cv2.COLOR_BGR2RGB)
        cv2.imshow("", show2)
        cv2.imwrite("./1.jpg", self.save_face_img)
        name = str(random.randint(1, 100))
        cv2.imwrite("./photo/luorun/" + name + ".jpg", show2)
        show2 = cv2.imread("./1.jpg")
        # show2=cv2.imread("./1.jpg",0)
        # print(show2.shape)# 128,128,4
        print(show2.shape)
        #showImage1 = QImage(show2.data, show2.shape[1], show2.shape[0], QImage.Format_RGB888)
        #self.facelab.setPixmap(QPixmap.fromImage(showImage1), )

        self.cap.release()
        self.camera_lab.clear()
        showImage1 = QImage(show2.data, show2.shape[1], show2.shape[0], QImage.Format_RGB888)
        self.camera_lab.setPixmap(QPixmap.fromImage(showImage1), )
        # 这里需要重新给摄像头赋值，否则会移除
        self.cap = cv2.VideoCapture(0)


if __name__ == '__main__':
    app = QApplication(sys.argv)  # 使用sys新建一个应用（Application）对象
    MainWindow = QMainWindow()  # 新建一个Qt中QMainWindow()类函数
    ui = Ui_MainWindow()  # 定义ui，与我们设置窗体绑定
    ui.setupUi(MainWindow)  # 为MainWindow绑定窗体
    MainWindow.show()  # 将MainWindow窗体进行显示
    sys.exit(app.exec_())
